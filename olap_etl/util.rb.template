require 'rubygems'
require 'sequel'
require 'rdf'

USER = ''
PASSWORD = ''

class Util

  #
  #== Util.connect_db
  #
  # return Sequel DB object
  #
  def self.connect_db( p )

    user =     p[:user]     || USER
    passwd =   p[:password] || PASSWORD
    host =     p[:host]     || 'localhost'
    db =       p[:db]       || 'test2'
    db_type =  p[:db_type]  || 'mysql'
    encoding = p[:encoding] || 'utf8'

    Sequel.connect( "#{db_type}://#{user}:#{passwd}@#{host}/#{db}",
                    { :encoding => encoding} )
  end

  #
  #== Util.connect_gn
  #
  # return Sequel DB Object that connects GeoNames Database
  #
  def self.connect_gn( p )

    db = p[:db] || 'geonames_rdf'

    self.connect_db( { :user =>     p[:user],
                       :password => p[:password],
                       :host =>     p[:host],
                       :db =>       db,
                       :db_type =>  p[:db_type],
                       :encoding => p[:encoding] } )
  end

  #
  #== Util.geonames_id
  #
  # return geonames id from geonames uri
  # params: http://sws.geonames.org/7452809/
  # return: 7452809
  #
  def self.geonames_id( geonames_uri )
    /\//.match( /org\//.match( geonames_uri ).post_match ).pre_match
  end

  #
  #=== Util.chop_uri
  #
  # return choped uri
  # params: http://www.w3.org/2001/XMLSchema#string
  # result: string
  #
  def self.chop_uri( uri )
    if m = /\#/.match( uri.to_s )
      m.post_match
    else
      nil
    end
  end

  #
  #== Util.valid_http_uri?
  #
  # if argument uri has started 'http', return true
  #
  def self.valid_http_uri?( uri )
    URI.parse( uri ).scheme == 'http' rescue false
  end

  #
  #== Util.get_column_name
  #
  # estimate column name from predicate (argument)
  #
  def self.get_column_name( predicate )
    m = /\#/.match( predicate )
    if m != nil
      m.post_match
    else
      n = predicate.reverse.match( /\// )
      if n != nil
        n.pre_match.reverse
      else
        l = predicate.match( /http:\/\// )
        if l != nil
          l.post_match
        else
          Time.now.strftime( "unknown_%N" )
        end
      end
    end
  end

  def self.detect_data_type( uri )

    # xsd data type
    # http://infohost.nmt.edu/tcc/help/pubs/rnc/xsd.html

    case uri
    when 'RDF::Literal::String', 'String'
      String
    when 'RDF::Literal::Boolean', 'Boolean'
      'Boolean'
    when 'RDF::Literal::Date', 'Date'
      Date
    when 'RDF::Literal::DateTime', 'DateTime'
      DateTime
    when 'RDF::Literal::Double', 'Double', 'Float'
      Float
    when 'RDF::Literal::Int', 'RDF::Literal::Integer', 'Integer', 'Int'
      Integer
    when 'RDf::Literal::Time', 'Time'
      Time
    else
      String
    end
  end

  def self.add_index( db, table_name, column_name )
    table_name = table_name.to_sym if table_name.class != Symbol
    begin
      db.alter_table table_name do
        if column_name.class == String
          add_index column_name.to_sym
        elsif column_name.class == Array
          column_name.each do |column|
            add_index column.to_sym
          end
        end
      end
      puts 'add_index are completed'
    rescue => exp
      puts '!!! unexpected alter_table error !!!'.upcase
      puts exp.message
      puts exp.backtrace
    end
  end

end
